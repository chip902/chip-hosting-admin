generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  name        String?
  timeEntries TimeEntry[]
  projects    Project[]   @relation("ProjectUser")
}

model Customer {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  email       String      @db.VarChar(255)
  dateCreated DateTime    @default(now())
  defaultRate Float
  color       String?
  shortName   String?
  shortname   String?
  invoices    Invoice[]
  projects    Project[]
  timeEntries TimeEntry[]
}

model Project {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  customerId   Int
  dateCreated  DateTime       @default(now())
  rate         Float?
  customer     Customer       @relation(fields: [customerId], references: [id])
  ProjectTasks ProjectTasks[]
  TimeEntry    TimeEntry[]
  tasks        Task[]         @relation("ProjectTasks")
  users        User[]         @relation("ProjectUser")
}

model Task {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  dateCreated  DateTime       @default(now())
  rate         Float?
  ProjectTasks ProjectTasks[]
  timeEntries  TimeEntry[]
  projects     Project[]      @relation("ProjectTasks")
}

model ProjectTasks {
  projectId Int
  taskId    Int
  project   Project @relation(fields: [projectId], references: [id])
  task      Task    @relation(fields: [taskId], references: [id])

  @@id([projectId, taskId])
}

model Invoice {
  id          Int           @id @default(autoincrement())
  customerId  Int
  totalAmount Float
  dateCreated DateTime      @default(now())
  pdfPath     String?
  Customer    Customer      @relation(fields: [customerId], references: [id])
  InvoiceItem InvoiceItem[]
  timeEntries TimeEntry[]   @relation("InvoiceTimeEntries")
}

model TimeEntry {
  id            Int          @id @default(autoincrement())
  description   String?
  duration      Int
  date          DateTime
  userId        Int
  taskId        Int
  invoiceItemId Int?
  customerId    Int
  projectId     Int
  invoiceId     Int?
  isInvoiced    Boolean      @default(false)
  invoice       Invoice?     @relation("InvoiceTimeEntries", fields: [invoiceId], references: [id], map: "TimeEntry_InvoiceTimeEntries_fkey")
  Customer      Customer     @relation(fields: [customerId], references: [id])
  InvoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  Project       Project      @relation(fields: [projectId], references: [id])
  Task          Task         @relation(fields: [taskId], references: [id])
  User          User         @relation(fields: [userId], references: [id])
}

model InvoiceItem {
  id          Int         @id @default(autoincrement())
  description String
  quantity    Int
  unitPrice   Float
  invoiceId   Int
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  timeEntries TimeEntry[]
}
