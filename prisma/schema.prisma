generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  userId            String?         @unique
  dwollaCustomerId  String?         @unique
  dwollaCustomerUrl String?         @unique
  email             String          @unique
  password          String?
  firstName         String?
  lastName          String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  dob               String?
  ssn               String?
  role              String?
  timeEntries       TimeEntry[]
  projects          Project[]       @relation("ProjectUser")
  Session           Session[]
  Authenticator     Authenticator[]
  banks             Bank[]
}

model Customer {
  id           Int         @id @default(autoincrement())
  name         String      @db.VarChar(255)
  email        String      @db.VarChar(255)
  dateCreated  DateTime    @default(now())
  defaultRate  Float
  color        String?
  shortName    String?
  paymentTerms String?
  invoices     Invoice[]
  projects     Project[]
  timeEntries  TimeEntry[]
}

model Project {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  customerId   Int
  dateCreated  DateTime       @default(now())
  rate         Float?
  customer     Customer       @relation(fields: [customerId], references: [id])
  ProjectTasks ProjectTasks[]
  TimeEntry    TimeEntry[]
  tasks        Task[]         @relation("ProjectTasks")
  users        User[]         @relation("ProjectUser")
}

model Task {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  dateCreated  DateTime       @default(now())
  rate         Float?
  ProjectTasks ProjectTasks[]
  timeEntries  TimeEntry[]
  projects     Project[]      @relation("ProjectTasks")
}

model ProjectTasks {
  projectId Int
  taskId    Int
  project   Project @relation(fields: [projectId], references: [id])
  task      Task    @relation(fields: [taskId], references: [id])

  @@id([projectId, taskId])
}

model Invoice {
  id          Int           @id @default(autoincrement())
  customerId  Int
  totalAmount Float
  dateCreated DateTime      @default(now())
  pdfPath     String?
  Customer    Customer      @relation(fields: [customerId], references: [id])
  InvoiceItem InvoiceItem[]
  timeEntries TimeEntry[]   @relation("InvoiceTimeEntries")
}

model TimeEntry {
  id            Int          @id @default(autoincrement())
  description   String?
  duration      Int
  date          DateTime
  userId        Int
  taskId        Int
  endDate       DateTime?
  invoiceItemId Int?
  customerId    Int
  projectId     Int
  invoiceId     Int?
  isInvoiced    Boolean?     @default(false)
  isBillable    Boolean?     @default(true)
  color         String?
  startSlot     Int?
  endSlot       Int?
  totalHours    Float?
  width         Int?
  left          Int?
  invoice       Invoice?     @relation("InvoiceTimeEntries", fields: [invoiceId], references: [id], map: "TimeEntry_InvoiceTimeEntries_fkey")
  customer      Customer     @relation(fields: [customerId], references: [id])
  invoiceItem   InvoiceItem? @relation(fields: [invoiceItemId], references: [id])
  project       Project      @relation(fields: [projectId], references: [id])
  task          Task         @relation(fields: [taskId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
}

model InvoiceItem {
  id          Int         @id @default(autoincrement())
  description String
  quantity    Int
  unitPrice   Float
  invoiceId   Int
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  timeEntries TimeEntry[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int // Changed from string to integer
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Authenticator {
  id     Int    @id @default(autoincrement())
  userId Int // Changed from string to integer
  secret String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bank {
  id               Int           @id @unique @default(autoincrement())
  userId           String        @unique
  bankId           String
  accountId        String
  accessToken      String
  fundingSourceUrl String
  sharableId       String
  User             User          @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Transaction      Transaction[]
}

model Transaction {
  id             String   @id
  accountId      String
  amount         Float
  date           DateTime
  name           String
  paymentChannel String?
  pending        Boolean  @default(false)
  category       String
  bankId         Int
  userId         String
  bank           Bank     @relation(fields: [bankId], references: [id])

  @@index([userId])
  @@index([bankId])
  @@index([date])
}
