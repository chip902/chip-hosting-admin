/**
 * remove-item.ts
 *
 * Usage (with ts-node):
 *   ts-node remove-item.ts --bankId=123
 *
 * This script:
 *   1. Looks up a 'bank' record by an ID in your DB
 *   2. Calls Plaid's /item/remove with the found accessToken
 *   3. Removes the bank record from DB
 */

const { Configuration, PlaidApi, PlaidEnvironments } = require("plaid");
const { PrismaClient } = require("@prisma/client");

// 1) Initialize Prisma
const prisma = new PrismaClient();

// 2) Initialize Plaid client
const plaidClient = new PlaidApi(
	new Configuration({
		basePath: process.env.NODE_ENV === "production" ? PlaidEnvironments.production : PlaidEnvironments.sandbox,
		baseOptions: {
			headers: {
				"PLAID-CLIENT-ID": process.env.PLAID_CLIENT_ID ?? "",
				"PLAID-SECRET": process.env.NODE_ENV === "production" ? process.env.PLAID_PROD_SECRET : process.env.PLAID_SAND_SECRET,
			},
		},
	})
);

async function removeItem(bankIdParam: string) {
	// 1) Find the 'bank' record in your DB
	console.log(`Fetching bank record with id = ${bankIdParam}`);
	const bank = await prisma.bank.findUnique({
		where: { id: parseInt(bankIdParam, 10) }, // or use parseInt if it's numeric
	});

	if (!bank) {
		throw new Error(`No bank found with id = ${bankIdParam}`);
	}

	if (!bank.accessToken) {
		throw new Error(`Bank record (id=${bank.id}) has no accessToken stored. Nothing to remove.`);
	}

	console.log(`Found bank record. Attempting to remove item from Plaid for bank id = ${bank.id}...`);

	// 2) Call Plaid's itemRemove endpoint
	try {
		await plaidClient.itemRemove({ access_token: bank.accessToken });
		console.log("Successfully removed Item from Plaid.");
	} catch (err: any) {
		if (err?.response?.data?.error_code === "ITEM_NOT_FOUND") {
			console.warn("Item already removed or doesn't exist in Plaid. Continuing...");
		} else {
			// any other error is worth throwing
			throw err;
		}
	}

	// Now delete local DB row
	await prisma.transaction.deleteMany({ where: { bankId: bank.id } });
	await prisma.bank.delete({ where: { id: bank.id } });
	console.log("Bank record and associated transactions deleted from DB.");

	// 3) Remove the bank row from your DB
	console.log(`Deleting bank record with id = ${bank.id} from DB...`);
	await prisma.bank.delete({ where: { id: bank.id } });
	console.log("Bank record deleted from DB.");

	console.log("Done! You can now re-link the account with days_requested=730.");
}

async function main() {
	// Simple argument parser. Example usage: ts-node remove-item.ts --bankId=123
	const args = process.argv.slice(2);
	const bankIdArg = args.find((arg) => arg.startsWith("--bankId="));

	if (!bankIdArg) {
		console.error("Error: Missing --bankId=XYZ argument");
		process.exit(1);
	}

	// e.g. "--bankId=123" => "123"
	const bankIdParam = bankIdArg.split("=")[1];

	try {
		await removeItem(bankIdParam);
	} catch (error: any) {
		console.error("Failed to remove item:", error);
		process.exit(1);
	} finally {
		// Make sure to close the DB connection
		await prisma.$disconnect();
	}
}

// Run main
main();
